#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>

#define NUM_CH 3

void handleSignal(int signal) {
    printf("Interrupt received by Child %d\n", getpid());
}

int main() {
    pid_t childPID[NUM_CH];
    int pipes[NUM_CH][2];

    for (int i = 0; i < NUM_CH; i++) {
        if (pipe(pipes[i]) == -1) {
            perror("Pipe creation failed");
            exit(1);
        }
    }

    for (int i = 0; i < NUM_CH; i++) {
        childPID[i] = fork();

        if (childPID[i] < 0) {
            perror("Fork failed");
            exit(1);
        } else if (childPID[i] == 0) {
            close(pipes[i][1]); 

            signal(SIGINT, handleSignal);

            char buffer[100];
            read(pipes[i][0], buffer, sizeof(buffer));
            printf("Child %d received: %s", getpid(), buffer);

            close(pipes[i][0]); 
            exit(0);
        } else {
            
            close(pipes[i][0]); 

            
            char message[100];
            sprintf(message, "Message Parent to Child %d\n", childPID[i]);
            write(pipes[i][1], message, sizeof(message));

            close(pipes[i][1]); 
        }
    }


    for (int i = 0; i < NUM_CH; i++) {
        waitpid(childPID[i], NULL, 0);
    }

    printf("Exit\n");
    return 0;
}